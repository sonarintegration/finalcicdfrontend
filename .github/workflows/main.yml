name: CI for React

on:
  push:
    branches:
      - master
      - feature
  pull_request:
    branches:
      - master
      - feature

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm # or wherever your dependencies are stored
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --sarif-file-output=snyk.sarif

      - name: List directory contents
        run: ls -la

      # - name: Upload SARIF file
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: snyk.sarif
      #     category: my-analysis-tool

      # - name: Convert SARIF to HTML
      #   uses: sebastianpopp/sarif2html-action@v1
      #   with:
      #    input: snyk.sarif
      #    output: snyk-report.html

      # - name: Upload HTML report as artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: snyk-report
      #     path: snyk-report.html

      # - name: Print Snyk report
      #   run: cat snyk.sarif

      # - name: Run Trivy vulnerability scanner in repo mode
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: 'fs'
      #     ignore-unfixed: true
      #     format: 'sarif'
      #     output: 'trivy-results.sarif'
      #     severity: 'CRITICAL'

      # - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: 'fs'
      #     format: 'github'
      #     output: 'dependency-results.sbom.json'
      #     image-ref: '.'
      #     github-pat: ${{ secrets.GH_TOKEN }}

      # - name: Create coverage artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: trivy result
      #     path: dependency-results.sbom.json

      # - name: Setup Node.js
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: 20.11.0

      # - name: Install dependencies
      #   run: npm install

      # - name: Build
      #   run: npm run build

      # - name: Archive build artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: build
      #     path: build/

      # - name: Static Code Analysis for React.js
      #   uses: sonarsource/sonarqube-scan-action@v2
      #   with:
      #     projectBaseDir: .
      #     args: >
      #       -Dsonar.organization=sonarintegration-1
      #       -Dsonar.projectKey=sonarintegration-1_react-todo
      #       -Dsonar.sources=src/
      #       -Dsonar.host.url=https://sonarcloud.io
      #       -Dsonar.projectName=React_Todo
      #       -Dsonar.projectVersion=1.0
      #       -Dsonar.sourceEncoding=UTF-8
      #       -Dsonar.exclusions=**/*.test.js,**/__tests__/**
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # - name: Send notification on Slack using Webhooks - Success
      #   if: ${{ always() }}
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload: |
      #       {
      #         "text": "React project built successfully."
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # - name: Send notification on Slack using Webhooks - Failure
      #   if: ${{ failure() }}
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload: |
      #       {
      #         "text": "React build failed. Please check the build logs for details."
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # - name: Install JFrog CLI
      #   run: |
      #     curl -fL https://getcli.jfrog.io | sh
      #     chmod +x jfrog
      #     mv jfrog /usr/local/bin/

      # - name: Configure npm Authentication
      #   run: |
      #     echo "//shubhamtodo.jfrog.io/artifactory/react_todo-npm-local/:_authToken=${{ secrets.JFROG_AUTH_TOKEN }}" >> ~/.npmrc
      #     echo "email=shubhamchav@cybage.com" >> ~/.npmrc
      #     echo "always-auth=true" >> ~/.npmrc
